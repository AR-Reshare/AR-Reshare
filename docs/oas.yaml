# NOTE: There are returns that have unneccessary information in them
openapi: 3.1.0

info:
  title: AR Reshare Application
  license:
    url: https://example.com
    name: License to be decided by client
  summary: A donation marketplace with augmented reality features
  description: This document describes how the front-end and back-end segments will communicate with each other
  contact:
    name: Davide Correia
    email: rlrt51@durham.ac.uk
  version: 0.2.0

servers:
- url: \#
  description: The url will be filled out as we push through development

security:
  - bearerAuth:
    - \/account\/[\w\/]+
    - \/conversation\/[\w\/]+
    - \/conversations
    - \/listing\/create
    - \/listing\/modify
    - \/listing\/close



paths:
  /:
    get:
      operationId: getHomePage
      description: Returns the API specification page
      responses:
        '200':
          description: The page is succesfully returned
          
  /token/regeneration:
    post:
      operationId: getRegeneratedToken
      description: Regenerates a new token based off of a currently valid token (that is about to expire)
      responses:
        '501':
          description: This action is not yet supported
        # '201':
        #   $ref: 'responses.yaml#/components/responses/token-regeneration'
        # '400':
        #   description: A valid old token wasn't provided in the header of the HTTP request

  /passwordResetRequest:
    post:
      operationId: requestPasswordReset
      description: Sends a password reset email to the corresponding email if it exists
      responses:
        '501':
          description: This action is not yet supported
      #   '200':
      #     description: The request was processed without any exceptions (The email may or may not exist in the db)
      #   '400':
      #     description: The email provided was of an invalid format
      # requestBody:
      #   $ref: 'requestBodies.yaml#/components/requestBodies/password-reset-request'
  
  ## I was considering splitting this up into two but want to reduce the number of endpoints
  /passwordResetExecute:
    post:
      operationId: executePasswordReset
      description: Executes the password reset if the tokens are valid
      responses:
        '501':
          description: This action is not yet supported
      #   '200':
      #     description: The request was executed successfully and the account's password has now been changed
      #   '400':
      #     description: The arguments were of invalid formats
      # requestBody:
      #   $ref: 'requestBodies.yaml#/components/requestBodies/password-reset-execute'

  /categories/list:
    get:
      operationId: getCategoryDescriptors
      description: Retrieves the currently available categories
      responses:
        '200':
          description: The categories list was successfully retrieved
          $ref: 'responses.yaml#/components/responses/category-descriptors'

  ################################### ACCOUNT PATH ITEM OBJECTS ########################################
  /account/create:
    put:
      operationId: createAccount
      description: Creates an account with request arguments
      responses:
        '201': # Succesfully created
          description: The account has been created successfully
          $ref: 'responses.yaml#/components/responses/account-create'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/account-create'
        '409': # Conflict
          description: The email address specified is already registered to an account
          $ref: 'responses.yaml#/components/responses/account-create'
        '422': # Unprocessable Entity
          description: At least one parameter was invalid. For example, the submitted password does not meet security requirements, the email address is fake, or the date of birth is not far enough in the past
          $ref: 'responses.yaml#/components/responses/account-create'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-signup'
               
  /account/close:
    patch: # not delete
      operationId: closeAccount
      description: Closes the current account (some info is required by law to be retained). The 'current' account is the one the user is logged in as."
      responses:
        '200': # Success
          description: The account has been queued for close - the user no longer has access
          $ref: 'responses.yaml#/components/responses/account-close'
        '400': # Bad Request
          description: The request had a badly formatted schemas/account-close object
          $ref: 'responses.yaml#/components/responses/account-close'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/account-close'
        '403': # Forbidden
          description: Insufficient privileges to perform request
          $ref: 'responses.yaml#/components/responses/account-close'
        '409': # Conflict
          description: The account is already queued for close
          $ref: 'responses.yaml#/components/responses/account-close'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-close'
  
  /account/login:
    post:
      operationId: loginAccount
      description: Login in to the requested account using request arguments
      responses:
        '200': # Success
          description: Logs into the requested account
          $ref: 'responses.yaml#/components/responses/account-login'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/account-login'
        '401': # Unauthorised
          description: Failed to log into requested account
          $ref: 'responses.yaml#/components/responses/account-login'
        '404': # Not Found
          description: The account doesn't exist
          $ref: 'responses.yaml#/components/responses/account-login'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-login'
     
  /account/modify:
    patch:
      operationId: modifyAccount
      description: Modifies the details of the current account
      responses:
        '200': # Success
          description: The details has been successfully modified
          $ref: 'responses.yaml#/components/responses/account-modify'
        '400': # Bad Request
          description: Bad schemas/account-modifiedDetails object received
          $ref: 'responses.yaml#/components/responses/account-modify'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/account-modify'
        '422': # Unprocessable Entity
          description: At least one parameter was invalid. For example, the submitted password does not meet security requirements, the email address is fake, or the date of birth is not far enough in the past
          $ref: 'responses.yaml#/components/responses/account-create'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-modify'

  /account/listing/view:
    get:
      operationId: getAccountListingByID
      description: Returns the listing which matches the value of the parameter "listingID"
      responses:
        '200': # Success
          description: The listing exists and it is returned
          $ref: 'responses.yaml#/components/responses/listing-private'
        '400': # Bad Request
          description: The request did not include a "listingID" parameter
          $ref: 'responses.yaml#/components/responses/listing-private'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/listing-private'
      parameters:
        - $ref: 'parameters.yaml#/components/parameters/listingID'

  /account/listings/search:
    get:
      operationId: searchAccountListings
      description: Returns the listings that match the criteria provided by the requests parameter
      responses:
        '501':
          description: This action is not yet supported
      #   '200': # Success
      #     description: Returns all available listings with the parameters required
      #     $ref: 'responses.yaml#/components/responses/listings-descriptor'
      #   '400': # Bad Request
      #     description: The request did not include a valid query parameter
      #     $ref: 'responses.yaml#/components/responses/listings-descriptor'
      # parameters:
      #   - $ref: 'parameters.yaml#/components/parameters/maxResults'
      #   - $ref: 'parameters.yaml#/components/parameters/endResults'
      #   - $ref: 'parameters.yaml#/components/parameters/startResults'
      #   - $ref: 'parameters.yaml#/components/parameters/categoryId'
        ##NOTE: Didn't add region parameter since I find it unneccessary for when searching your own listin gs

  ## NOTE: Listings owned by the user cannot be saved!! (hence listings-public instead of listings-private)
  /account/saved-listings/search:
    get:
      operationId: searchSavedListings
      description: Returns the user's saved listings
      responses:
        '501':
          description: This action is not yet supported
      #   '200': # Success
      #     description: Returns all saved listings
      #     $ref: 'responses.yaml#/components/responses/listings-public'
      #   '400':
      #     description: The request did not include a valid query parameter
      #     $ref: 'responses.yaml#/components/responses/listings-public'
      # parameters:
      #   - $ref: 'parameters.yaml#/components/parameters/maxResults'
      #   - $ref: 'parameters.yaml#/components/parameters/endResults'
      #   - $ref: 'parameters.yaml#/components/parameters/startResults'
      #   - $ref: 'parameters.yaml#/components/parameters/categoryId'
      #   - $ref: 'parameters.yaml#/components/parameters/region'

  ## Potential Unsuspecting Vulnerability (Make sure to validate that the listing
  ## that is saved is public) -- otherwise adversary has access to archived listings
  ## NOTE: This isn't a create endpoint, but it's just to keep with the format
  /account/saved-listings/create:
    post:
      operationId: createSavedListing
      description: Saves a listing
      responses:
        '501':
          description: This action is not yet supported
      #   '201': # Succesfully created
      #     description: The listing has been saved for the user
      #     $ref: 'responses.yaml#/components/responses/post'
      #   '400': # Bad Request
      #     description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
      #     $ref: 'responses.yaml#/components/responses/post'
      #   '409': # Conflict
      #     description: The listing has already been saved for the user
      #     $ref: 'responses.yaml#/components/responses/post'
      #   '422': # Unprocessable Entity
      #     description: At least one parameter was invalid.
      #     $ref: 'responses.yaml#/components/responses/post'
      # parameters:
      #   - $ref: 'parameters.yaml#/components/parameters/listingID'

  /account/saved-listings/delete:
    post:
      operationId: deleteSavedListing
      description: deletes a listing from the saved-listing
      responses:
        '501':
          description: This action is not yet supported
      #   '200': # Success
      #     description: The listing has been succesfully removed from saved-listings
      #     $ref: 'responses.yaml#/components/responses/post'
      #   '400': # Bad Request
      #     description: The request did not include a listingID
      #     $ref: 'responses.yaml#/components/responses/post'
      #   '401': # Unauthorised
      #     description: The user did not provide a valid authentication token
      #     $ref: 'responses.yaml#/components/responses/post'
      #   '403': # Forbidden
      #     description: The user has insufficient priviledges to perform the action
      #     $ref: 'responses.yaml#/components/responses/post'
      #   '404': # Not Found
      #     description: The listing does not exist
      #     $ref: 'responses.yaml#/components/responses/post'
      #   '409': # Conflict
      #     description: The listing is already closed
      #     $ref: 'responses.yaml#/components/responses/post'
      # parameters:
      #   - $ref: 'parameters.yaml#/components/parameters/listingID'


  /account/addresses/list:
    get:
      operationId: getAccountAddresses
      description: Returns the user's previously used/saved addresses
      responses:
        '200':
          description: Returns a list of the user's previously used addresses
          $ref: 'responses.yaml#/components/responses/account-address-list'





  ## NOTE: /account/reset-request and /account/reset-execute endpoints have been eliminated
  ## --> IF you are logged in and want to perform some password modification, please use the 
  ## endpoint /account/modify which can modify passwords, names, age, email etc.






  #NOTE: I've deleted single-variable modification paths into a generic path that handles all modification

  ################################ LISTINGS ######################################################
  ## Some of the below functionality does not require authentication - hence the missing 401, 403 codes
  /listing/view:
    get:
      operationId: getListingByID
      description: Returns the listing which matches the value of the parameter "listingId"
      responses:
        '200': # Success
          description: The listing exists and it is returned
          $ref: 'responses.yaml#/components/responses/listing-public'
        '400': # Bad Request
          description: The request did not include a "listingID" parameter
          $ref: 'responses.yaml#/components/responses/listing-public'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/listing-public'
      parameters:
        - $ref: 'parameters.yaml#/components/parameters/listingID'

  /listings/search:
    get:
      operationId: searchListings
      description: Returns the listings that match the criteria provided by the requests parameter
      responses:
        '200': # Success
          description: Returns all available listings with the parameters required
          $ref: 'responses.yaml#/components/responses/listings-descriptor'
        '400': # Bad Request
          description: The request did not include a valid query parameter'
          $ref: 'responses.yaml#/components/responses/listings-descriptor'
      parameters:
        - $ref: 'parameters.yaml#/components/parameters/maxResults'
        - $ref: 'parameters.yaml#/components/parameters/startResults'
        - $ref: 'parameters.yaml#/components/parameters/categoryId'
        - $ref: 'parameters.yaml#/components/parameters/region'
   
  /listing/create:
    put:
      operationId: createListing
      description: Creates a new listing
      responses: 
        '201': # Successfully Created
          description: The listing has been succesfully created
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorized
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/post'
        '403': # Forbidden
          description: The user is not allowed to create a listing
          $ref: 'responses.yaml#/components/responses/post'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/listing-create'

  /listing/modify:
    patch:
      operationId: modifyListing
      description: Modifies the listings
      responses:
        '200': # Success
          description: The listing has been modified successfully
          $ref: 'responses.yaml#/components/responses/post'
        '400': # Bad Request
          description: The modification form is in an invalid format
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/post'
        '403': # Forbidden
          description: The user has insufficient priviledges to perform the action
          $ref: 'responses.yaml#/components/responses/post'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/post'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/listing-modify'

  /listing/close:
    patch:
      operationId: closeListing
      description: Closes a listing (i.e. is no longer available to the public, but the user is still able to see it)
      responses:
        '200': # Success
          description: The listing has been succesfully closed
          $ref: 'responses.yaml#/components/responses/post'
        '400': # Bad Request
          description: The request did not include a listingID
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/post'
        '403': # Forbidden
          description: The user has insufficient priviledges to perform the action
          $ref: 'responses.yaml#/components/responses/post'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/post'
        '409': # Conflict
          description: The listing is already closed
          $ref: 'responses.yaml#/components/responses/post'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/listing-close'


  ####################################### CONVERSATION ###################################

  # A conversation is uniquely created by the set {buyerID, listingID}
  # -> sellerID is implied from listingID,
  # -> buyerID is defined by the account currenlty signed in

  # Once a converstaion has been created, a conversationID,
  # -> This is associated to the set that was used to create it (i.e {buyer, listing, seller})

  # NOTE: All of these will be using some authentication token (e.g. jwt)
  /conversation/create:
    put:
      operationId: createConversation
      description: Initiates a converstaion with the seller based on a unique listingID
      responses:
        '201': # Successfully Created
          description: The conversation has been initiated
          $ref: 'responses.yaml#/components/responses/post'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/post'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/post'
        '409': # Conflict
          description: The converstaion already exists
          $ref: 'responses.yaml#/components/responses/post'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/conversation-create'
  
  /conversation/close:
    patch:
      operationId: closeConversation
      description: Closes a converstaion with the seller based on a unique conversationID
      responses:
        '200': # Success
          description: The conversation has been closed
          $ref: 'responses.yaml#/components/responses/post'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/post'
        '404': # Not Found
          description: The conversation does not exist, the user is not part of it, or it is closed
          $ref: 'responses.yaml#/components/responses/post'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/conversation-close'

  /conversation/message:
    put:
      operationId: sendConversationMessage
      description: Sends a message to a conversation via it's conversationID
      responses:
        '200': # Success
          description: The message has been successfully delivered
          $ref: 'responses.yaml#/components/responses/post'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/post'
        '403': # Forbidden
          description: The user does not have permission to send this message (for example, because the seller has blocked them)
          $ref: 'responses.yaml#/components/responses/post'
        '404': # Not Found
          description: The conversation does not exist, or this user is not part of it
          $ref: 'responses.yaml#/components/responses/post'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/conversation-message'

  /conversations:
    get:
      operationId: getConversationDescriptors
      description: Returns descriptors of conversations that the user still has open
      responses:
        '200': # Success
          description: Returns a set of the descriptors of the most recent converstaions
          $ref: 'responses.yaml#/components/responses/conversation-descriptors'
        '400': # Bad Request
          description: The parameters sent in the request were badly formatted
          $ref: 'responses.yaml#/components/responses/conversation-descriptors'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-descriptors'
        '403': # Forbidden
          description: The user has insufficient priviledges to perform the action
          $ref: 'responses.yaml#/components/responses/conversation-descriptors'
      parameters:
        - $ref: 'parameters.yaml#/components/parameters/startResults'
        - $ref: 'parameters.yaml#/components/parameters/maxResults'

  /conversation/view:
    get:
      operationId: getConversationByID
      description: Returns the conversation of a given conversationID
      responses:
        '200': # Success
          description: The conversation exists and it has been returned
          $ref: 'responses.yaml#/components/responses/conversation-view'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/conversation-view'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-view'
        '404': # Not Found
          description: The conversation does not exist, or this user is not part of it
          $ref: 'responses.yaml#/components/responses/conversation-view'     
      parameters:
        - $ref: 'parameters.yaml#/components/parameters/conversationID'
        - $ref: 'parameters.yaml#/components/parameters/startResults'
        - $ref: 'parameters.yaml#/components/parameters/maxResults'



########################### SECURITY SCHEME OBJECT ##############################
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

