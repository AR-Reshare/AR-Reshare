# NOTE: There are returns that have unneccessary information in them
openapi: 3.1.0

info:
  title: AR Reshare Application
  summary: A donation marketplace with augmented reality features
  description: This document describes how the front-end and back-end segments will communicate with each other
  contact:
    name: Davide Correia
    email: rlrt51@durham.ac.uk
  version: 0.1.0
  servers:
  - url: \#
    description: The url will be filled out as we push through development
  security:
    bearerAuth:
    - /admin/[0-9A-Za-z/]+ ## Create better regex expression
    - /account/deletion
    - /account/modification
    - /conversation
    - /conversations/[0-9A-Za-z]*


paths:
  /index:
    get:
      description: Returns the index page of the Application
      responses:
        '200':
          description: ...

  /:
    $ref: '#/paths/index'

########################################### ADMIN ##########################################################
  /admin/: # TODO: a standard authentication method
    post:
      description: Authenticates in order to access the admin console
      responses:
        '200':
          description: The admin has authenticated with the admin console
          $ref: 'responses.yaml#/components/responses/post'
        '400': # Bad Request
          description: The request did not include the required parameters
          $ref: 'responses.yaml#/components/responses/listing'
        '401': # Unauthorised (distinct to 403 Forbidden)
          description: The user did not authenticate with the correct credentials with the admin console
          $ref: 'responses.yaml#/components/responses/post'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-login'

  /admin/listing/view:
    get:
      description: Returns the listing which matches the value of the parameter "listingId"
      responses:
        '200':
          description: The listing exists and it is returned
          $ref: 'responses.yaml#/components/responses/listing'
        '400': # Bad Request
          description: The request did not include a "listingID" parameter
          $ref: 'responses.yaml#/components/responses/listing'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/listing'
        '403': # Forbidden
          description: The user's authentication token does not correspond to an administrator account
          $ref: 'responses.yaml#/components/responses/listing'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/listing'
      parameters:
        listingID:
          $ref: 'parameters.yaml#/components/parameters/listingID'

  /admin/listings/search:
    get:
      description: Returns the listings that match the criteria provided by the requests parameter
      responses:
        '200':
          description: Returns all available listings with the parameters required
          $ref: 'responses.yaml#/components/responses/listings'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/listings'
        '403': # Forbidden
          description: The user's authentication token does not correspond to an administrator account
          $ref: 'responses.yaml#/components/responses/listings'
        # no 404 included - I assume that if no listings match, the reponse will still be 200 but will be empty
      parameters:
        maxResults:
          $ref: 'parameters.yaml#/components/parameters/maxResults'
        endResults:
          $ref: 'parameters.yaml#/components/parameters/endResults'
        startResults:
          $ref: 'parameters.yaml#/components/parameters/startResults'
        query:
          $ref: 'parameters.yaml#/components/parameters/queryString'
        
  /admin/listing/modification:
    post:
      description: Modifies the listings
      responses:
        '200':
          description: The listing has been modified successfully
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/post'
        '403': # Forbidden
          description: The user's authentication token does not correspond to an administrator account
          $ref: 'responses.yaml#/components/responses/post'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/listing-modification'

  /admin/user/view:
    get:
      description: Returns the user which matches the value of the parameter "userID"
      responses:
        '200':
          description: Returns the user-view
          $ref: 'responses.yaml#/components/responses/admin-user-view'
        '400': # Bad Request
          description: The request did not include a "userID" parameter
          $ref: 'responses.yaml#/components/responses/admin-user-view'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/admin-user-view'
        '403': # Forbidden
          description: The user's authentication token does not correspond to an administrator account
          $ref: 'responses.yaml#/components/responses/admin-user-view'
        '404': # Not Found
          description: The user does not exist
          $ref: 'responses.yaml#/components/responses/admin-user-view'
      parameters:
        userID:
          $ref: 'schemas.yaml#/components/schemas/id'

  /admin/user/search:
    get:
      description: Returns the users that match the criteria provided by the requests parameter
      responses:
        '200':
          description: The server processed the request succesfully and returns candidate user-views
          $ref: 'responses.yaml#/components/responses/admin-user-search'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/admin-user-search'
        '403': # Forbidden
          description: The user's authentication token does not correspond to an administrator account
          $ref: 'responses.yaml#/components/responses/admin-user-search'
      parameters:
        userID:
          $ref: 'schemas.yaml#/components/schemas/id'
        category:
          $ref: 'schemas.yaml#/components/schemas/category'


  # NOTE: This path will need to be re-evaluated (need to decide what the admin can change)
  /admin/user/manipulate:
    post:
      description: Modifies the user's values
      responses:
        '200':
          description: The server has successfully modified user details
          $ref: 'responses.yaml#/components/responses/account-modification'
        '400': # Bad Request
          description: The request did not include a "userID" parameter
          $ref: 'responses.yaml#/components/responses/account-modification'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/account-modification'
        '403': # Forbidden
          description: The user's authentication token does not correspond to an administrator account
          $ref: 'responses.yaml#/components/responses/account-modification'
        '404': # Not Found
          description: The user does not exist
          $ref: 'responses.yaml#/components/responses/account-modification'
    requestBody:
      $ref: 'requestBodies.yaml#/components/requestBodies/account-modification'


    /admin/report/view:
      get:
        description: Returns the report which matches the value of the parameter "reportID"
        responses:
          '200':
            description: Returns the report
            $ref: 'responses.yaml#/components/responses/report'
          '400': # Bad Request
            description: The request did not include a "reportID" parameter
            $ref: 'responses.yaml#/components/responses/report'
          '401': # Unauthorised
            description: The user did not send an authentication token, or the authentication token does not match a valid account
            $ref: 'responses.yaml#/components/responses/report'
          '403': # Forbidden
            description: The user's authentication token does not correspond to an administrator account
            $ref: 'responses.yaml#/components/responses/report'
          '404': # Not Found
            description: The user does not exist
            $ref: 'responses.yaml#/components/responses/report'
        parameters:
          reportID:
            $ref: 'schemas.yaml#/components/schemas/id'

    /admin/report/search:
      get:
        description: Returns the reports that match the criteria provided by the requests parameter
        responses:
          '200':
            description: The server processed the request succesfully and returns candidate reports
            $ref: 'responses.yaml#/components/responses/reports'
          '401': # Unauthorised
            description: The user did not send an authentication token, or the authentication token does not match a valid account
            $ref: 'responses.yaml#/components/responses/reports'
          '403': # Forbidden
            description: The user's authentication token does not correspond to an administrator account
            $ref: 'responses.yaml#/components/responses/reports'
        parameters:
          reportID:
            $ref: 'schemas.yaml#/components/schemas/id'
          category:
            $ref: 'schemas.yaml#/components/schemas/category'

     
    /admin/report/close:
      post:
        description: After the admin has reviewed a report, they submit the outcome
        responses:
          '200':
            description: The server processed the report review succesfully
            $ref: 'responses.yaml#/components/responses/post'
        requestBody:
          $ref: 'requestBodies.yaml#/components/requestBodies/report-review'




    # NOTE: These urls (may) not exist -- this is because a sanction is included in the report section as an optional parameter
    # This is because, in order to track sanctions and reasons, it would be unfair if an admin just hit the ban button without even filling out why
    /admin/sanctions/create:
      ##
    /admin/sanctions/delete:
      ##
    /admin/sanctions/view:
      ##

  ## for users

  /account/sanctions/view:
    get:
      '200':
        description: ...

    ##
  /account/sanctions/list:
    get:
      description: ...
      responses:
        '200':
          description: ...


    ##
  /account/sanctions/appeal:
    get:
      '200':
        description: ...
    ##




  # NOTE: The below paths do not seem neccessary

  # site related paths (This isn't neccessarily required)
  # This may include monitoring and modification functionality
  # !!! I was thinking these could include adding/removing categories or language packs for future-proofing
  /admin/site/manipulate:
    post:
      description: ...
      responses:
        '200':
          description: ...
          $ref: ...
        '401':
          description: ...
          $ref: ...
        '403':
          description: ...
          $ref: ...
    requestBody:
      $ref: ...

  /admin/site/monitor:
    post:
      description: ...
      responses:
        '200':
          description: ...
          $ref: ...
        '401':
          description: ...
          $ref: ...
        '403':
          description: ...
          $ref: ...
    requestBody:
      $ref: ...


################################### ACCOUNT ##########################################################
  /account/creation/:
    post:
      description: Creates an account with request arguments
      responses:
        '201':
          description: The account has been created successfully
          $ref: 'responses.yaml#/components/responses/account-creation'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/account-creation'
        '409': # Conflict
          description: The email address specified is already registered to an account
          $ref: 'responses.yaml#/components/responses/account-creation'
        '422': # Unprocessable Entity
          description: At least one parameter was invalid. For example, the submitted password does not meet security requirements, the email address is fake, or the date of birth is not far enough in the past
          $ref: 'responses.yaml#/components/responses/account-creation'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-signup'
               
  /account/deletion:
    post: # not delete
      description: "'Deletes' the current account (some info is required by law to be retained). The 'current' account is the one the user is logged in as."
      responses:
        '200':
          description: The account has been queued for deletion - the user no longer has access
          $ref: 'responses.yaml#/components/responses/account-deletion'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/account-deletion'
        '409': # Conflict
          description: The account is already queued for deletion
          $ref: 'responses.yaml#/components/responses/account-deletion'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-deletion'
  
  /account/login/:
    post:
      description: Login in to the requested account using request arguments
      responses:
        '200':
          description: Logs into the requested account
          $ref: 'responses.yaml#/components/responses/account-login'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/account-login'
        '401': # Unauthorised
          description: Failed to log into requested account
          $ref: 'responses.yaml#/components/responses/account-login'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-login'
     
  /account/modification/:
    put:
      description: Modifies the details of the current account
      responses:
        '200':
          description: The details has been successfully modified
          $ref: 'responses.yaml#/components/responses/account-modification'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/account-modification'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-modification'

  # TODO: 
  /account/reset/:
    put: 
      description: Modifies the details

  # !!! one for a password reset? -- ANSWER: The above handled all account modification. The client will send the new information to overwrite and they use their password and token to validate their request
  ## This overwrite can include a new password
  #NOTE: I've deleted single-variable modification paths into a generic path that handles all modification

################################ LISTINGS ######################################################
  /listing/view:
    get:
      description: Returns the listing which matches the value of the parameter "listingId"
      responses:
        '200':
          description: The listing exists and it is returned
          $ref: 'responses.yaml#/components/responses/listing'
        '400': # Bad Request
          description: The request did not include a "listingID" parameter
          $ref: 'responses.yaml#/components/responses/listing'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/listing'
        '403': # Forbidden
          description: The user's authentication token does not correspond to an administrator account
          $ref: 'responses.yaml#/components/responses/listing'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/listing'
      parameters:
        listingID:
          $ref: 'parameters.yaml#/components/parameters/listingID'


  /listings/search:
    get:
      description: Returns the listings that match the criteria provided by the requests parameter
      responses:
        '200':
          description: Returns all available listings with the parameters required
          $ref: 'responses.yaml#/components/responses/listings'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/listings'
        # no 404 included - I assume that if no listings match, the reponse will still be 200 but will be empty
      parameters:
        maxResults:
          $ref: 'parameters.yaml#/components/parameters/maxResults'
        endResults:
          $ref: 'parameters.yaml#/components/parameters/endResults'
        startResults:
          $ref: 'parameters.yaml#/components/parameters/startResults'
        query:
          $ref: 'parameters.yaml#/components/parameters/queryString'
   
  /listings/create:
    post:
      description: Creates a new listing
      responses: 
        '200':
          description: The listing has been succesfully created
          $ref: '#responses.yaml#/components/responses/post'
        '401': #
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: '#responses.yaml#/components/responses/post'
      requestBodies:
        $ref: 'requestBodies#/components/requestBodies/listing-creation'

  /listings/modify:
    post:
      description: Modifies the listings
      responses:
        '200':
          description: The listing has been modified successfully
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/post'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/listing-modification'


  /listings/close:
    post:
      description: Closes a listing (i.e. is no longer available to the public, but the user is still able to see it)
      responses:
        '200':
          description: The listing has been succesfully closed
          $ref: 'responses.yaml#/components/responses/post'
    requestBody:
      $ref: 'requestBodies.yaml#/components/requestBodies/listing-close'

  /report:
    post:
      description: Submits a report form
      responses:
        '200':
          description: The report has successfully been submitted
          $ref: 'schemas.yaml#/components/responses/post'
        '401': # Unauthorised -- This may be a question of debate whther a user must be logged in or not. (i.e. someone can spam reports a lot more easily if no auth is required)
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/post'
        '409': ## Conflict, there already exists a "ongoing" report by the victimID with the same parameters
          description: There already exists a "ongoing" report by the victimID with the same parameters
          $ref: 'schemas.yaml#/components/responses/post'
    requestBody:
      $ref: 'requestBodies.yaml#/components/requestBodies/report-submit'
  

  

####################################### CONVERSATION ###################################

# A conversation is uniquely created by the set {buyerID, listingID}
# -> sellerID is implied from listingID,
# -> buyerID is defined by the account currenlty signed in

# Once a converstaion has been created, a conversationID,
# -> This is associated to the set that was used to create it (i.e {buyer, listing, seller})

# NOTE: All of these will be using some authentication token (e.g. jwt)
  /conversation/start:
    post:
      description: Initiates a converstaion with the seller based on a unique listingID
      responses:
        '201':
          description: The conversation has been initiated
          $ref: 'responses.yaml#/components/responses/conversation-start'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/conversation-start'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-start'
        '403': # Forbidden
          description: The user does not have permission to start this conversation (for example, because the seller has blocked them)
          $ref: 'responses.yaml#/components/responses/conversation-start'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/conversation-start'
        '409': # Conflict
          description: The converstaion already exists
          $ref: 'responses.yaml#/components/responses/conversation-start'
        '410': # Gone
          description: The listing is closed
          $ref: 'responses.yaml#/components/responses/conversation-start'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/conversation-start'
  
  /conversation/end:
    post:
      description: Closes a converstaion with the seller based on a unique conversationID
      responses:
        '200':
          description: The conversation has been ended
          $ref: 'responses.yaml#/components/responses/conversation-end'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/conversation-end'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-end'
        '404': # Not Found
          description: The conversation does not exist
          $ref: 'responses.yaml#/components/responses/conversation-end'
        '409': # Conflict
          description: The conversation is already closed
          $ref: 'responses.yaml#/components/responses/conversation-end'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/conversation-end'

  /conversations:
    get:
      description: Returns descriptors of conversations that the user still has open
      responses:
        '200':
          description: Returns a set of the descriptors of the most recent converstaions
          $ref: 'responses.yaml#/components/responses/conversation-descriptors'
        '400': # Bad Request
          description: The parameters sent in the request were badly formatted
          $ref: 'responses.yaml#/components/responses/conversation-descriptors'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-descriptors'
      parameters:
        start:
          $ref: 'parameters.yaml#/components/parameters/startResults'
        end:
          $ref: 'parameters.yaml#/components/parameters/endResults'
        max:
          $ref: 'parameters.yaml#/components/parameters/maxResults'
      
  /conversation/message:
    post:
      description: Sends a message to a conversation via it's conversationID
      responses:
        '200':
          description: The message has been successfully delivered
          $ref: 'responses.yaml#/components/responses/conversation-message'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/conversation-message'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-message'
        '403': # Forbidden
          description: The user does not have permission to send this message (for example, because the seller has blocked them)
          $ref: 'responses.yaml#/components/responses/conversation-message'
        '404': # Not Found
          description: The conversation does not exist, or this user is not part of it
          $ref: 'responses.yaml#/components/responses/conversation-message'
        '410': # Gone
          description: The conversation is closed
          $ref: 'responses.yaml#/components/responses/conversation-message'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/conversation-message'

  /conversation:
    get:
      description: Returns the conversation of a given conversationID
      responses:
        '200':
          description: The conversation exists and it has been returned
          $ref: 'responses.yaml#/components/responses/conversation'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/conversation'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation'
        '404': # Not Found
          description: The conversation does not exist, or this user is not part of it
          $ref: 'responses.yaml#/components/responses/conversation'     
    parameters:
      conversationID:
        $ref: 'schemas.yaml#/components/schemas/id'






########################### SECURITY SCHEME OBJECT ##############################
securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT


    

    



  
      
      
  
  








