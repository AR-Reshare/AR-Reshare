# NOTE: There are returns that have unneccessary information in them
openapi: 3.1.0

info:
  title: AR Reshare Application
  summary: A donation marketplace with augmented reality features
  description: This document describes how the front-end and back-end segments will communicate with each other
  contact:
    name: Davide Correia
    email: rlrt51@durham.ac.uk
  version: 0.1.0
  servers:
  - url: \#
    description: The url will be filled out as we push through development
  security:
    bearerAuth:
    - \/account\/[\w\/]+
    - \/conversation\/[\w\/]+
    - \/conversations
    - \/listing\/create
    - \/listing\/modify
    - \/listing\/close



paths:
  /index:
    get:
      description: Returns the index page of the Application
      responses:
        '200':
          description: The index page is succesfully returned

  /:
    get:
      description: Returns the index page of the Application
      responses:
        '200':
          description: The index page is succesfully returned

  /token/regeneration:
    post:
      description: Regenerates a new token based of a currently valid token (that is about to expire)
      responses:
        '201':
          description: The new token has been successfully generated
          $ref: 'responses.yaml#/components/responses/token-regeneration'
        '400':
          description: A valid old token wasn't provided in the header of the HTTP request
          $ref: 'responses.yaml#/components/responses/post'

  /passwordResetRequest:
    post:
      description: Sends a password reset email to the corresponding email if it exists
      responses:
        '200':
          description: The request was processed without any exceptions (The email may or may not exist in the db)
          $ref: 'responses.yaml#/components/responses/post'
        '400':
          description: The email provided was of an invalid format
          $ref: 'responses.yaml#/components/responses/post'
      requestBodies:
        $ref: 'requestBodies.yaml#/components/requestBodies/password-reset-request'
  
  ## I was considering splitting this up into two but want to reduce the number of endpoints
  /passwordResetExecute:
    post:
      description: Executes the password reset if the tokens are valid
      responses:
        '200':
          description: The request was executed successfully and the account's password has now been changed
          $ref: 'responses.yaml#/components/responses/post'
        '400':
          description: The arguments were of invalid formats
          $ref: 'responses.yaml#/components/responses/post'
      requestBodies:
        $ref: 'requestBodies.yaml#/components/requestBodies/password-reset-execute'

  /categories/list:
    get:
      description: Retrieves the currently available categories
      responses:
        '200':
          description: The categories list was successfully retrieved
          $ref: 'responses.yaml#/components/responses/category-descriptor-list'

  ################################### ACCOUNT PATH ITEM OBJECTS ########################################
  /account/create:
    post:
      description: Creates an account with request arguments
      responses:
        '201': # Succesfully created
          description: The account has been created successfully
          $ref: 'responses.yaml#/components/responses/account-create'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/account-create'
        '409': # Conflict
          description: The email address specified is already registered to an account
          $ref: 'responses.yaml#/components/responses/account-create'
        '422': # Unprocessable Entity
          description: At least one parameter was invalid. For example, the submitted password does not meet security requirements, the email address is fake, or the date of birth is not far enough in the past
          $ref: 'responses.yaml#/components/responses/account-create'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-signup'
               
  /account/close:
    post: # not delete
      description: Closes the current account (some info is required by law to be retained). The 'current' account is the one the user is logged in as."
      responses:
        '200': # Success
          description: The account has been queued for close - the user no longer has access
          $ref: 'responses.yaml#/components/responses/account-close'
        '400': # Bad Request
          description: The request had a badly formatted schemas/account-close object
          $ref: 'responses.yaml#/components/responses/account-close'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/account-close'
        '403': # Forbidden
          description: Insufficient privileges to perform request
          $ref: 'responses.yaml#/components/responses/account-close'
        '409': # Conflict
          description: The account is already queued for close
          $ref: 'responses.yaml#/components/responses/account-close'
    requestBody:
      $ref: 'requestBodies.yaml#/components/requestBodies/account-close'
  
  /account/login:
    post:
      description: Login in to the requested account using request arguments
      responses:
        '200': # Success
          description: Logs into the requested account
          $ref: 'responses.yaml#/components/responses/account-login'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/account-login'
        '401': # Unauthorised
          description: Failed to log into requested account
          $ref: 'responses.yaml#/components/responses/account-login'
        '404': # Not Found
          description: The account doesn't exist
          $ref: 'responses.yaml#/components/responses/account-login'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-login'
     
  /account/modify:
    put:
      description: Modifies the details of the current account
      responses:
        '200': # Success
          description: The details has been successfully modified
          $ref: 'responses.yaml#/components/responses/account-modify'
        '400': # Bad Request
          description: Bad schemas/account-modifiedDetails object received
          $ref: 'responses.yaml#/components/responses/account-modify'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/account-modify'
        '403': # Not Found
          description: Insufficient privileges to perform request
          $ref: 'responses.yaml#/components/responses/account-modify'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/account-modify'

  /account/listing/view:
    get:
      description: Returns the listing which matches the value of the parameter "listingId"
      responses:
        '200': # Success
          description: The listing exists and it is returned
          $ref: 'responses.yaml#/components/responses/listing-private'
        '400': # Bad Request
          description: The request did not include a "listingID" parameter
          $ref: 'responses.yaml#/components/responses/listing-private'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/listing-private'
      parameters:
        listingID:
          $ref: 'parameters.yaml#/components/parameters/listingID'

  /account/listings/search:
    get:
      description: Returns the listings that match the criteria provided by the requests parameter
      responses:
        '200': # Success
          description: Returns all available listings with the parameters required
          $ref: 'responses.yaml#/components/responses/listings-private'
        '400': # Bad Request
          description: The request did not include a valid query parameter
          $ref: 'responses.yaml#/components/responses/listings-private'
      parameters:
        maxResults:
          $ref: 'parameters.yaml#/components/parameters/maxResults'
        endResults:
          $ref: 'parameters.yaml#/components/parameters/endResults'
        startResults:
          $ref: 'parameters.yaml#/components/parameters/startResults'
        categoryId:
          $ref: 'parameters.yaml#/components/parameters/categoryId'
  

  ## NOTE: Listings owned by the user cannot be saved!! (hence listings-public instead of listings-private)
  /account/saved-listings/search:
    get:
      description: Returns the user's saved listings
      responses:
        '200': # Success
          description: Returns all saved listings
          $ref: 'responses.yaml#/components/responses/listings-public'
        '400':
          description: The request did not include a valid query parameter
          $ref: 'responses.yaml#/components/responses/listings-public'
      parameters:
        maxResults:
          $ref: 'parameters.yaml#/components/parameters/maxResults'
        endResults:
          $ref: 'parameters.yaml#/components/parameters/endResults'
        startResults:
          $ref: 'parameters.yaml#/components/parameters/startResults'
        categoryId:
          $ref: 'parameters.yaml#/components/parameters/categoryId'
        region:
          $ref: 'parameters.yaml#/components/parameters/region'

  ## Potential Unsuspecting Vulnerability (Make sure to validate that the listing
  ## that is saved is public) -- otherwise adversary has access to archived listings
  ## NOTE: This isn't a create endpoint, but it's just to keep with the format
  /account/saved-listings/create:
    post:
      description: Saves a listing
      responses:
        '201': # Succesfully created
          description: The listing has been saved for the user
          $ref: 'responses.yaml#/components/responses/post'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/post'
        '409': # Conflict
          description: The listing has already been saved for the user
          $ref: 'responses.yaml#/components/responses/post'
        '422': # Unprocessable Entity
          description: At least one parameter was invalid.
          $ref: 'responses.yaml#/components/responses/post'
    parameters:
        listingID:
          $ref: 'parameters.yaml#/components/parameters/listingID'

  /account/saved-listings/delete:
    post:
      description: deletes a listing from the saved-listing
      responses:
        '200': # Success
          description: The listing has been succesfully removed from saved-listings
          $ref: 'responses.yaml#/components/responses/post'
        '400': # Bad Request
          description: The request did not include a listingID
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/post'
        '403': # Forbidden
          description: The user has insufficient priviledges to perform the action
          $ref: 'responses.yaml#/components/responses/post'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/post'
        '409': # Conflict
          description: The listing is already closed
          $ref: 'responses.yaml#/components/responses/post'
    parameters:
        listingID:
          $ref: 'parameters.yaml#/components/parameters/listingID'


  /account/addresses/list:
    get:
      description: Returns the user's previously used/saved addresses
      responses:
        '200':
          description: Returns a list of the user's previously used addresses
          $ref: 'responses.yaml#/components/responses/account-address-list'





  ## NOTE: /account/reset-request and /account/reset-execute endpoints have been eliminated
  ## --> IF you are logged in and want to perform some password modification, please use the 
  ## endpoint /account/modify which can modify passwords, names, age, email etc.






  #NOTE: I've deleted single-variable modification paths into a generic path that handles all modification

  ################################ LISTINGS ######################################################
  ## Some of the below functionality does not require authentication - hence the missing 401, 403 codes
  /listing/view:
    get:
      description: Returns the listing which matches the value of the parameter "listingId"
      responses:
        '200': # Success
          description: The listing exists and it is returned
          $ref: 'responses.yaml#/components/responses/listing-public'
        '400': # Bad Request
          description: The request did not include a "listingID" parameter
          $ref: 'responses.yaml#/components/responses/listing-public'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/listing-public'
      parameters:
        listingID:
          $ref: 'parameters.yaml#/components/parameters/listingID'

  /listings/search:
    get:
      description: Returns the listings that match the criteria provided by the requests parameter
      responses:
        '200': # Success
          description: Returns all available listings with the parameters required
          $ref: 'responses.yaml#/components/responses/listings-public'
        '400': # Bad Request
          description: The request did not include a valid query parameter
          $ref: 'responses.yaml#/components/responses/listings-public'
      parameters:
        maxResults:
          $ref: 'parameters.yaml#/components/parameters/maxResults'
        endResults:
          $ref: 'parameters.yaml#/components/parameters/endResults'
        startResults:
          $ref: 'parameters.yaml#/components/parameters/startResults'
        categoryId:
          $ref: 'parameters.yaml#/components/parameters/categoryId'
        region:
          $ref: 'parameters.yaml#/components/parameters/region'
   
  /listing/create:
    post:
      description: Creates a new listing
      responses: 
        '201': # Successfully Created
          description: The listing has been succesfully created
          $ref: '#responses.yaml#/components/responses/post'
        '401': # Unauthorized
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: '#responses.yaml#/components/responses/post'
        '403': # Forbidden
          description: The user is not allowed to create a listing
          $ref: 'responses.yaml#/components/responses/post'
      requestBodies:
        $ref: 'requestBodies.yaml#/components/requestBodies/listing-create'

  /listing/modify:
    put:
      description: Modifies the listings
      responses:
        '200': # Success
          description: The listing has been modified successfully
          $ref: 'responses.yaml#/components/responses/post'
        '400': # Bad Request
          description: The modification form is in an invalid format
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorised
          description: The user did not send an authentication token, or the authentication token does not match a valid account
          $ref: 'responses.yaml#/components/responses/post'
        '403': # Forbidden
          description: The user has insufficient priviledges to perform the action
          $ref: 'responses.yaml#/components/responses/post'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/post'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/listing-modify'

  /listing/close:
    post:
      description: Closes a listing (i.e. is no longer available to the public, but the user is still able to see it)
      responses:
        '200': # Success
          description: The listing has been succesfully closed
          $ref: 'responses.yaml#/components/responses/post'
        '400': # Bad Request
          description: The request did not include a listingID
          $ref: 'responses.yaml#/components/responses/post'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/post'
        '403': # Forbidden
          description: The user has insufficient priviledges to perform the action
          $ref: 'responses.yaml#/components/responses/post'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/post'
        '409': # Conflict
          description: The listing is already closed
          $ref: 'responses.yaml#/components/responses/post'
    requestBody:
      $ref: 'requestBodies.yaml#/components/requestBodies/listing-close'


  ####################################### CONVERSATION ###################################

  # A conversation is uniquely created by the set {buyerID, listingID}
  # -> sellerID is implied from listingID,
  # -> buyerID is defined by the account currenlty signed in

  # Once a converstaion has been created, a conversationID,
  # -> This is associated to the set that was used to create it (i.e {buyer, listing, seller})

  # NOTE: All of these will be using some authentication token (e.g. jwt)
  /conversation/create:
    post:
      description: Initiates a converstaion with the seller based on a unique listingID
      responses:
        '201': # Successfully Created
          description: The conversation has been initiated
          $ref: 'responses.yaml#/components/responses/conversation-create'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/conversation-create'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-create'
        '403': # Forbidden
          description: The user does not have permission to start this conversation (for example, because the seller has blocked them)
          $ref: 'responses.yaml#/components/responses/conversation-create'
        '404': # Not Found
          description: The listing does not exist
          $ref: 'responses.yaml#/components/responses/conversation-create'
        '409': # Conflict
          description: The converstaion already exists
          $ref: 'responses.yaml#/components/responses/conversation-create'
        '410': # Gone
          description: The listing is closed
          $ref: 'responses.yaml#/components/responses/conversation-create'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/conversation-create'
  
  /conversation/close:
    post:
      description: Closes a converstaion with the seller based on a unique conversationID
      responses:
        '200': # Success
          description: The conversation has been closed
          $ref: 'responses.yaml#/components/responses/conversation-close'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/conversation-close'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-close'
        '404': # Not Found
          description: The conversation does not exist
          $ref: 'responses.yaml#/components/responses/conversation-close'
        '409': # Conflict
          description: The conversation is already closed
          $ref: 'responses.yaml#/components/responses/conversation-close'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/conversation-close'

  /conversation/message:
    post:
      description: Sends a message to a conversation via it's conversationID
      responses:
        '200': # Success
          description: The message has been successfully delivered
          $ref: 'responses.yaml#/components/responses/conversation-message'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/conversation-message'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-message'
        '403': # Forbidden
          description: The user does not have permission to send this message (for example, because the seller has blocked them)
          $ref: 'responses.yaml#/components/responses/conversation-message'
        '404': # Not Found
          description: The conversation does not exist, or this user is not part of it
          $ref: 'responses.yaml#/components/responses/conversation-message'
        '410': # Gone
          description: The conversation is closed
          $ref: 'responses.yaml#/components/responses/conversation-message'
      requestBody:
        $ref: 'requestBodies.yaml#/components/requestBodies/conversation-message'

  /conversations:
    get:
      description: Returns descriptors of conversations that the user still has open
      responses:
        '200': # Success
          description: Returns a set of the descriptors of the most recent converstaions
          $ref: 'responses.yaml#/components/responses/conversation-descriptors'
        '400': # Bad Request
          description: The parameters sent in the request were badly formatted
          $ref: 'responses.yaml#/components/responses/conversation-descriptors'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-descriptors'
        '403': # Forbidden
          description: The user has insufficient priviledges to perform the action
          $ref: 'responses.yaml#/components/responses/post'
      parameters:
        start:
          $ref: 'parameters.yaml#/components/parameters/startResults'
        end:
          $ref: 'parameters.yaml#/components/parameters/endResults'
        max:
          $ref: 'parameters.yaml#/components/parameters/maxResults'

  /conversation/view:
    get:
      description: Returns the conversation of a given conversationID
      responses:
        '200': # Success
          description: The conversation exists and it has been returned
          $ref: 'responses.yaml#/components/responses/conversation-view'
        '400': # Bad Request
          description: The request did not include a/some required parameter(s), or those parameters were formatted incorrectly
          $ref: 'responses.yaml#/components/responses/conversation-view'
        '401': # Unauthorised
          description: The user did not provide a valid authentication token
          $ref: 'responses.yaml#/components/responses/conversation-view'
        '404': # Not Found
          description: The conversation does not exist, or this user is not part of it
          $ref: 'responses.yaml#/components/responses/conversation-view'     
    parameters:
      conversationID:
        $ref: 'parameters.yaml#/components/parameters/conversationID'



########################### SECURITY SCHEME OBJECT ##############################
securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

