openapi: 3.1.0

info:
  title: AR Reshare Application
  summary: A donation marketplace with augmented reality features
  description: This document describes how the front-end and back-end segments will communicate with each other
  contact:
    name: Davide Correia
    email: rlrt51@durham.ac.uk
  version: 0.1.0
  servers:
  - url: \#
    description: The url will be filled out as we push through development


# TODO: complete paths
# WAITING: I'm still waiting on each person to provide their own set of urls

paths:
  /index:
    get:
      description: Returns the index page of the Application
      responses:
        '200':
          description: # Not completed

  /:
    $ref: '#/paths/index'




########################################### ADMIN ##########################################################
paths:
  /admin/: # TODO: a standard authentication method



  ## -----> listing related paths
  /admin/listing/view:
    get:
      description: Returns the listing which matches the value of the parameter "listingId"
      responses:
        '200':
          # TODO
      parameters:
        $ref: '#/components/parameters/view'
      # params = [ListingId]


  /admin/listing/search:
    get:
      description: Retunrs the listings that matches the criteria provided by the requests parameter
      responses:
        '200':
          # TODO
      parameters:
        $ref: '#/components/parameters/search'
      # params = [UserId, Category]

  /admin/listing/manipulate: ## TODO



  ## -----> user related paths
  /admin/user/view:
    get:
    description: Returns the listing which matches the value of the parameter "userID"
    responses:
      '200':
        # TODO
    parameters:
      $ref: '#/components/parameters/view'
    # params = [userId]

  /admin/user/search:
    get:
      description: Retunrs the listings that matches the criteria provided by the requests parameter
      responses:
        '200':
          # TODO
      parameters:
        $ref: '#/components/parameters/search'
      # params = [UserId, Category]



  # params = [listingId, category]
  /admin/user/manipulate:
  # params = TODO



  # site related paths (This isn't neccessarily required)
  # This may include monitoring and modification functionality
  /admin/site/manipulate:
  /admin/site/monitor:
 
############################################################################################################




components:
  schemas:
    listing:
      type: object
      # these are the required parameters
      required:
      - listingId # the id of the listing
      - contributorId # the id of the contributor
      - description
      - location
      - category
      - creationDate
      - modificationDate # Ignoring archived date, and last modified
      - media ## this will encompass videos, photos and what other
      properties:
        listingId:
          $ref: '#/components/schemas/id'
        contributorId:
          $ref: '#/components/schemas/id'
        description:
          $ref: '#/components/schemas/description'
        location:
          $ref: '#/components/schemas/address'
        creationDate:
          $ref: '#/components/schemas/date'
        modificationDate:
          $ref: '#/components/schemas/date'
        media:
          $ref: '#/components/schemas/media'

    user:
      type: object
      required:
      - userId
      - name
      - bio
      - profilePics
      properties:
        userId:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/name'
        bio:
          $ref: '#/components/schemas/description'
        profilePics:
          $ref: '#/components/schemas/media'
    
    # formally called account schmema -- this won't be transferred between client and server (so I've split it up into objects where data would be transferred)
    signup:
      type: object
      required:
      - userId
      - email
      - password
      - DoB
      - address
      properties:
        userId:
          $ref: '#/components/schemas/id'
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
        DoB:
          $ref: '#/components/schemas/date'
        address:
          $ref: '#/components/schemas/address'

    login:
      type: object
      required:
      - userId
      - password
      properties:
        userId:
          $ref: '#/components/schemas/id'
        password:
          $ref: '#/components/schemas/password'

      
    message:
      type: object
      required:
      - messageId
      - senderId
      - receiverId
      - datetime
      - content
      properties:
        messageId:
          $ref: '#/components/schemas/id'
        senderId:
          $ref: '#/components/schemas/id'
        receiverId:
          $ref: '#/components/schemas/id'
        datetime:
          $ref: '#/components/schemas/datetime'
        content:
          $ref: '#/components/schemas/content'


    # TODO: This schema's structure is very likely to be changed in the near future
    content:
      type: object
      optional:
      - media
      - description
      properties:
        media:
          $ref: '#/components/schemas/media'
        description:
          $ref: '#/components/schemas/description'


    # TODO: This needs to be decided depending on what level of accuracy was decided -- This may also be influenced by the maps api that is ended up using
    address:
      type: object
      required:
      - country
      - city
      - zipcode
      optional:
      - street # which would include door number
      properties:
        country:
          type: string
        city:
          type: string
        zipcode:
          type: string
        street:
          type: string


    ## we'll define formats for these types below soon (e.g. sizes and other attributes)
    id:
      type: string

    name:
      type: string

    description:
      type: string

    date:
      type: string
      format: ISO Date (8601) # can be changed

    datetime:
      type: string
      format: ISO Datetime (8601) # can be changed

    password:
      type: string
      format: password

    email:
      type: string
      format: email
    
    media: # i.e media = ["url1", "url2", ...]
      type: array
      items:
        type: string
        format: url





######################################### Parameter Objects #################################################
  parameter:
    view
    

    



  
      
      
  
  








