# NOTE: There are returns that have unneccessary information in them
openapi: 3.1.0

info:
  title: AR Reshare Application
  summary: A donation marketplace with augmented reality features
  description: This document describes how the front-end and back-end segments will communicate with each other
  contact:
    name: Davide Correia
    email: rlrt51@durham.ac.uk
  version: 0.1.0
  servers:
  - url: \#
    description: The url will be filled out as we push through development


# TODO: complete paths
# WAITING: I'm still waiting on each person to provide their own set of urls

paths:
  /index:
    get:
      description: Returns the index page of the Application
      responses:
        '200':
          description: # Not completed

  /:
    $ref: '#/paths/index'




########################################### ADMIN ##########################################################
paths:
  /admin/: # TODO: a standard authentication method

  ## -----> listing related paths
  /admin/listing/view:
    get:
      description: Returns the listing which matches the value of the parameter "listingId"
      responses:
        '200':
          # TODO
      parameters:
        $ref: '#/components/parameters/view'
      # params = [ListingId]


  /admin/listing/search:
    get:
      description: Retunrs the listings that matches the criteria provided by the requests parameter
      responses:
        '200':
          # TODO
      parameters:
        $ref: '#/components/parameters/search'
      # params = [UserId, Category]

  /admin/listing/manipulate: ## TODO



  ## -----> user related paths
  /admin/user/view:
    get:
    description: Returns the listing which matches the value of the parameter "userID"
    responses:
      '200':
        # TODO
    parameters:
      $ref: '#/components/parameters/view'
    # params = [userId]

  /admin/user/search:
    get:
      description: Retunrs the listings that matches the criteria provided by the requests parameter
      responses:
        '200':
          # TODO
      parameters:
        $ref: '#/components/parameters/search'
      # params = [UserId, Category]



  # params = [listingId, category]
  /admin/user/manipulate:
  # params = TODO



  # site related paths (This isn't neccessarily required)
  # This may include monitoring and modification functionality
  /admin/site/manipulate:
  /admin/site/monitor:
 


################################### ACCOUNT ##########################################################
paths:
  /account/creation/:
    post:
      description: Creates an account with request arguments
      responses:
        '201':
          description: The account has been created successfully
          $ref: '#/components/responses/account-creation'
        '403':
          description: The account requested already exists
          $ref: '#/components/responses/account-creation'
      requestBody:
        $ref: '#/components/requestBodies/account-signup'
      
          
  /account/deletion:
    post: # not delete
      description: "Deletes" the current account (some info is required by law to be retained)
      responses:
        '200':
          description: The account has been queued for deletion - the user no longer has access
          $ref: '#/components/responses/account-deletion'
        '403':
          description: The account cannot be deleted (e.g. not authenticated)
          $ref: '#/components/responses/account-deletion'
      requestBody:
        $ref: '#/components/requestBodies/account-deletion'
  

  /account/login/:
    post:
      description: Login in to the requested account using request arguments
      responses:
        '200':
          description: Logs into the requested account
          $ref: '#/components/responses/account-login'
        '403':
          description: Failed to log into request account
          $ref: '#/components/responses/account-login'
      requestBody:
        $ref '#/components/requestBodies/account-login'
    
  /account/modification/:
    put:
      description: Modifies the details of the current account
      responses:
        '200':
          description: The details has been successfully modified
          $ref: '#/components/responses/account-modification'
        '403':
          description: The details has unsuccessfully been modified
          $ref: '#/components/responses/account-modification'
      requestBody:
        $ref: '#/components/requestBodies/account-modification'
  
  #NOTE: I've deleted single-variable modification paths into a generic path that handles all modification

  

####################################### CONVERSATION ###################################

# A conversation is uniquely created by the set {buyerID, listingID}
# -> sellerID is implied from listingID,
# -> buyerID is defined by the account currenlty signed in

# Once a converstaion has been created, a conversationID,
# -> This is associated to the set that was used to create it (i.e {buyer, listing, seller})

# NOTE: All of these will be using some authentication token (e.g. jwt)

paths:
  /conversation/start:
    post:
      description: Initiates a converstaion with the seller based on a unique listingID
      responses:
        '200':
          description: The conversation has been initiated
          $ref: '#/components/responses/conversation-start'
        '409':
          description: The converstaion already exists
          $ref: '#/components/responses/conversation-start'
      requestBody:
        $ref: '#/components/requestBodies/conversation-start'
  
  /conversation/end:
    post:
      description: Deletes a converstaion with the seller based on a unique conversationID
        '200':
          description: The conversation has been ended
          $ref: '#/components/responses/conversation-end'
        '409':
          description: The conversation did not exist (so can not be deleted)
          $ref: '#/components/responses/conversation-end'
      requestBody:
        $ref: '#/components/requestBodies/conversation-end'

  /conversations:
    get:
      description: Returns descriptors conversation that the user still has open
        '200':
          description: Returns a set of the descriptors of the most recent converstaions
          $ref: '#/components/responses/conversation-descriptors'
      parameters:
        start:
          $ref: '#/components/parameters/startResults'
        end:
          $ref: '#/components/parameters/endResults'
        max:
          $ref: '#/components/parameters/maxResults'
      
  /conversation/message:
    post:
      description: Sends a message to a conversation via it's conversationID
        '2xx':
          description: The message has been successfully delivered
          $ref: '#/components/responses/conversation-message'
        '5xx':
          description: The message has not been delivered
          $ref: '#/components/responses/conversation-message'
      requestBody:
        $ref: '#/components/requestBodies/conversation-message'

  /conversation:
    get:
      description: Returns the conversation of a given conversationID
      '200':
        description: The conversation exists and it has been returned
        $ref: '#/components/responses/conversation'
      '404':
        description: The conversation does not exist
        $ref: '#/components/responses/conversation'     
    parameters:
      conversationID:
        $ref: '#/components/schema/id'


components:

  responses:

    #NOTE: Error message is subject to change soon
    post:
      description: The response to a post request
      content:
        'application/json':
          schema:
            type: object
            required:
            - success
            optional:
            - error
            properties:
              success: boolean
              error: errorMsg
            examples:
              post-success:
                success: true
              post-failure:
                success: false
                error: this is an error message


    ################### ACCOUNT RESPONSES #####################

    account-deletion:
      description: The account was requested to be deleted
      $ref: '#/components/responses/post'

    account-creation:
      description: The account was requested to be created
      $ref: '#/components/responses/post'

    # TODO: I believe authentication information can be removed from here and put into a seperate security component
    account-signin:
      description: The account was sign in
      content:
        'application/json':
          schema:
            type: object
      headers:
        auth-token:
          $ref: '#/components/headers/auth-token'

    account-modification:
      description: Returns whether an account detail was modified successfully
      $ref: '#/components/responses/post'


  ####################### COMMS RESPONSES #######################
    conversation-descriptors:
      description: Returns a list of conversation descriptors
      content:
        'application/json':
          schema:
            type: array
            items:
              $ref: '#/components/schemas/conversation-descriptor'

    conversation-start:
      description: Returns the converstaion-descriptor if successful
      content:
        'application/json':
          schema:
            type: object
            required:
            - success
            optional:
            - conversation
            properties:
              conversation:
                $ref: '#/components/schemas/conversation-descriptor'
              success:
                type: boolean
     
    conversation-end:
      description: Returns whether the converstaion was deleted successfully
      $ref: '#/components/schemas/post'

    conversation-message:
      description: Returns whether a message was successfully delivered
      $ref: '#/components/schemas/post'

    conversation:
      description: Returns the conversation of a given conversationID
      $ref: '#/components/schemas/conversation'
    

  ###################### ADMIN RESPONSES ########################



  ################### ACCOUNT REQUESTBODIES #####################

  requestBodies:
    account-signup:
      content:
        'application/json':
          schema:
            $ref: '#/components/schema/account-signup'
    
    account-login:
      content:
        'application/json':
          schema:
            $ref: '#/components/schema/account-login'

    account-modification:
      content:
        'application/json':
          schema:
            $ref: '#/components/schema/account-modification'
       examples:
        single-var-change:
          password: current_password
          modifiedDetails:
            name: new_name
        multi-var-change:
          password: current_password
          modifiedDetails:
            name: new_name
            email: new_email_address@example.com
            password: new_password

          
  #################### COMMS REQUEST BODIES #######################
  requestBodies:
    conversation-end:
      content:
        'application/json':
          schema:
            type: object
            required:
            - conversationID
            properties:
              conversationID:
                $ref: '#/components/schemas/conversationID'
      
    conversation-start:
      content:
        'application/json':
          schema:
            type: object
            required:
            - receiverID  # this can be derived from listingID
            - listingID
            properties:
              receiverID:
                $ref: '#/components/schemas/id'
              listingID:
                $ref: '#/components/schemas/id'

    conversation-message:
      content:
        'application/json'
          schema:
            $ref: '#/components/schema/message'
              

  ######################### SCHEMAS ##############################

  schemas:

    account-modification:
      type: object
      required:
      - password
      - modifiedDetails
      properties:
        password:
          $ref: '#/components/schemas/password'
        variable-modification:
          $ref: '#/components/schemas/account-modifiedDetails'

    account-modifiedDetails:
      type: object
      optional:
      - name
      - email
      - dob
      - password
      properties:
        name:
          $ref: '#/components/schemas/name'
        email:
          $ref: '#/components/schemas/email'
        dob:
          $ref: '#/components/schemas/dob'
        password:
          $ref: '#/components/schemas/password'

    # formally called account schmema -- this won't be transferred between client and server (so I've split it up into objects where data would be transferred)
    
    account-signup:
      type: object
      required:
      - name
      - email
      - password
      - dob # DoB (keeping lowecase for consistency on naming)
      - address
      properties:
        userId:
          $ref: '#/components/schemas/name'
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
        dob:
          $ref: '#/components/schemas/date'
        address:
          $ref: '#/components/schemas/address'
      example:
        name: Sam Sepiol
        email: sspeiol@protonmail.org
        dob: '1986-09-17'
        address:
          $ref: '#/components/schemas/address/example'
        
    account-login:
      type: object
      required:
      - userId
      - password
      properties:
        userId:
          $ref: '#/components/schemas/id'
        password:
          $ref: '#/components/schemas/password'

    # TODO: There may be media links such as user profile picture to be included here
    conversation-descriptor:
      type: object
      required:
      - conversationID
      - receiver
      - listing
      properties:
        conversationID:
          $ref: '#/components/schemas/id'
        listing-descriptor:
          $ref: '#/components/schemas/listing'
        receiver-descriptor:
          $ref: '#/components/schemas/user'

    conversation:
      type: array
      items:
        $ref: '#/components/schemas/message'




  ########################### MID-LEVEL COMPONENTS ########################



    listing:
      type: object
      # these are the required parameters
      required:
      - listingId # the id of the listing
      - contributorId # the id of the contributor
      - description
      - location
      - category
      - creationDate
      - modificationDate # Ignoring archived date, and last modified
      - media ## this will encompass videos, photos and what other
      properties:
        listingId:
          $ref: '#/components/schemas/id'
        contributorId:
          $ref: '#/components/schemas/id'
        description:
          $ref: '#/components/schemas/description'
        location:
          $ref: '#/components/schemas/address'
        creationDate:
          $ref: '#/components/schemas/date'
        modificationDate:
          $ref: '#/components/schemas/date'
        media:
          $ref: '#/components/schemas/media'
    

    message:
      type: object
      required:
      - senderId
      - receiverId
      - datetime
      - content
      properties:
        senderId:
          $ref: '#/components/schemas/id'
        receiverId:
          $ref: '#/components/schemas/id'
        datetime:
          $ref: '#/components/schemas/datetime'
        content:
          $ref: '#/components/schemas/content'

    user:
      type: object
      required:
      - userId
      - name
      - bio
      - profilePics
      properties:
        userId:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/name'
        bio:
          $ref: '#/components/schemas/description'
        profilePics:
          $ref: '#/components/schemas/media'

    # TODO: This schema's structure is very likely to be changed in the near future
    content:
      type: object
      optional:
      - media
      - description
      properties:
        media:
          $ref: '#/components/schemas/media'
        description:
          $ref: '#/components/schemas/description'


    # TODO: This needs to be decided depending on what level of accuracy was decided -- This may also be influenced by the maps api that is ended up using
    address:
      type: object
      required:
      - country
      - city
      - zipcode
      optional:
      - street # which would include door number
      properties:
        country:
          $ref: '#/components/schemas/country'
        city:
          $ref: '#/components/schemas/city'
        zipcode:
          $ref: '#/components/schemas/zipcode'
        street:
          $ref: '#/components/schemas/street'

    media: # i.e media = ["url1", "url2", ...]
      type: array
      items:
        type: string
        format: url


    ############################## LOW-LEVEL COMPONENTS ###############################
    country:
      type: string

    city:
      type: string

    zipcode:
      type: string

    street:
      type: string

    ## we'll define formats for these types below soon (e.g. sizes and other attributes)
    id:
      type: string

    name:
      type: string

    description:
      type: string

    date:
      type: string
      format: ISO Date (8601) # can be changed

    datetime:
      type: string
      format: ISO Datetime (8601) # can be changed

    password:
      type: string
      format: password

    email:
      type: string
      format: email
    


  ################################# HEADERS COMPONENTS ######################################



  headers:
    auth-token:
      description: Used to authenticate requests
      schema:
        type: JWT Token # Room for change



######################################### Parameter Objects #################################################
  parameters:
    maxResults:
      name: max
      in: query
      description: Returns <= maxResults results
      required: true
      schema:
        type: integer
        format: int32
      
    startResults:
      name: start
      in: query
      description: Returns results starting and including from the nth result
      required: true
      schema:
        type: integer
        format: int32
    
    endResults:
      name: end
      in: query
      description: Returns results up to but not including the nth result
      required: false
      schema:
        type: integer
        format: int32

    
    
    

    



  
      
      
  
  








