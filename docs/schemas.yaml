##TODO: define the enums

## The currently supported entities are:
## 1. User
##    --> user-view
##    --> users-search
## 2. Listing
##    --> listings-search
##    --> listing-create
##    --> listing-modify
##    --> listing-close
## 3. Account
##    --> account-signup
##    --> account-login
##    --> account-close
##    --> account-modify
##    --> account-reset TODO
## 2. Report
##    --> 
## 3. Request
## 5. Sanctions
## 6. Admin
##    -->

components:
  schemas:



    ################ USER SCHEMAS ############################   
    user:
      type: object
      required:
      - userId
      - name
      - bio
      - profilePics
      properties:
        userId:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/name'
        bio:
          $ref: '#/components/schemas/description'
        profilePics:
          $ref: '#/components/schemas/media'

    user-view:
      type: object
      required:
      - name
      - dob
      - email
      - profilePhoto
      properties:
        name:
          $ref: '#/components/schemas/name'
        dob:
          $ref: '#/components/schemas/date'
        email:
          $ref: '#/components/schemas/email'
        profilePicture:
          $ref: '#/components/schemas/photo'

    user-search:
      type: array
      items:
        $ref: '#/components/schemas/user-view'




    ############### LISTING SCHEMAS #########################
    listing-own:
      type: object
      required: 
      - listingId # the id of the listing
      - contributorId # the id of the contributor
      - title
      - description
      - location
      - category
      - condition
      - media ## this will encompass videos, photos and what other
      - creationDate
      - modificationDate # Ignoring archived date, and last modified
      - closedDate
      properties:
        listingId:
          $ref: '#/components/schemas/id'
        contributorId:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/title'
        description:
          $ref: '#/components/schemas/description'
        location:
          $ref: '#/components/schemas/address'
        category:
          $ref: '#/components/schemas/category'
        condition:
          $ref: '#/components/schemas/condition'
        media:
          $ref: '#/components/schemas/media'
        creationDate:
          $ref: '#/components/schemas/date'
        modificationDate:
          $ref: '#/components/schemas/date'
        closedDate:
          $ref: '#/components/schemas/date'

    listing-view:
      type: object
      # these are the required parameters
      required:
      - listingId # the id of the listing
      - contributorId # the id of the contributor
      - title
      - description
      - location
      - category
      - condition
      - creationDate
      - modificationDate # Ignoring archived date, and last modified
      - media ## this will encompass videos, photos and what other
      properties:
        listingId:
          $ref: '#/components/schemas/id'
        contributorId:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/title'
        description:
          $ref: '#/components/schemas/description'
        location:
          $ref: '#/components/schemas/address'
        category:
          $ref: '#/components/schemas/category'
        condition:
          $ref: '#/components/schemas/condition'
        creationDate:
          $ref: '#/components/schemas/date'
        modificationDate:
          $ref: '#/components/schemas/date'
        media:
          $ref: '#/components/schemas/media'

    listing-descriptor:
      type: object
      required:
      - listingId
      - contributorId
      - title
      - location
      - category
      - media
      properties:
        listingId:
          $ref: '#/components/schemas/id'
        contributorId:
          $ref: '#/components/schemas/id'
        location:
          $ref: '#/components/schemas/address'
        media:
          $ref: '#/components/schemas/media'
        condition:
          $ref: '#/components/schemas/condition'
        category:
          $ref: '#/components/schemas/category'
        title:
          $ref: '#/components/schemas/title'

    listings-private:
      type: array
      items:
        $ref: '#/components/schemas/listing-own'
        
    listings-public:
      type: array
      items:
        $ref: '#/components/schemas/listing-view'

    listings-descriptor:
      type: array
      items:
        $ref: '#/components/schemas/listing-descriptor'

    listing-create:
      type: object
      required:
      - title
      - description
      - location
      - category
      - condition
      - media ## this will encompass videos, photos and what other
      properties:
        description:
          $ref: '#/components/schemas/description'
        location:
          $ref: '#/components/schemas/address'
        category:
          $ref: '#/components/schemas/category'
        media:
          $ref: '#/components/schemas/media'
        condition:
          $ref: '#/components/schemas/condition'
        title:
          $ref: '#/components/schemas/title'

    listing-close:
      type: object
      required:
        - outcome
        - reason
      properties:
        outcome:
          type: string
          format: enum(close)
        reason:
          type: string
          format: enum(sold, removed)

    listing-modify:
      type: object
      required:
      - password
      - modifiedDetails
      properties:
        password:
          $ref: '#/components/schemas/password'
        variable-modification:
          $ref: '#/components/schemas/listing-modifiedDetails'
    
    listing-modifiedDetails:
      type: object
      optional:
      - title
      - description
      - location
      - category
      - media
      properties:
        description:
          $ref: '#/components/schemas/description'
        location:
          $ref: '#/components/schemas/address'
        category:
          $ref: '#/components/schemas/category'
        media:
          $ref: '#/components/schemas/media'

    category-descriptor:
      type: object
      required:
      - category
      - icon
      - color
      - categoryPath
      properties:
        category:
          $ref: '#/components/schemas/category'
        icon:
          $ref: '#/components/schemas/photo'
        color:
          $ref: '#/components/schemas/color'
        categoryPath:
          $ref: '#/components/schemas/path'




    ######################## ADMIN SCHEMAS ###########################
    account-signup:
      type: object
      required:
      - name
      - email
      - password
      - dob # DoB (keeping lowecase for consistency on naming)
      - address
      properties:
        userId:
          $ref: '#/components/schemas/name'
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
        dob:
          $ref: '#/components/schemas/date'
        address:
          $ref: '#/components/schemas/address'
      example:
        name: Sam Sepiol
        email: sspeiol@protonmail.org
        dob: '1986-09-17'
        
    account-login:
      type: object
      required:
      - email
      - password
      properties:
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'

    account-close:
      type: object
      required:
      - email
      - password
      properties:
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'

    account-modify:
      type: object
      required:
      - password
      - modifiedDetails
      properties:
        password:
          $ref: '#/components/schemas/password'
        variable-modification:
          $ref: '#/components/schemas/account-modifiedDetails'

    account-modifiedDetails:
      type: object
      optional:
      - name
      - email
      - dob
      - password
      properties:
        name:
          $ref: '#/components/schemas/name'
        email:
          $ref: '#/components/schemas/email'
        dob:
          $ref: '#/components/schemas/date'
        password:
          $ref: '#/components/schemas/password'

    


    #################### CONVERSATION SCHEMAS ########################
    # TODO: There may be media links such as user profile picture to be included here
    conversation-descriptor:
      type: object
      required:
      - conversationID
      - receiver
      - listing
      properties:
        conversationID:
          $ref: '#/components/schemas/id'
        listing-descriptor:
          $ref: '#/components/schemas/listing-descriptor'
        receiver-descriptor:
          $ref: '#/components/schemas/user'

    conversation:
      type: array
      items:
        $ref: '#/components/schemas/conversation-message'

    conversation-message:
      type: object
      required:
      - senderId
      - receiverId
      - datetime
      - mediaContent
      - textContent
      properties:
        senderId:
          $ref: '#/components/schemas/id'
        receiverId:
          $ref: '#/components/schemas/id'
        datetime:
          $ref: '#/components/schemas/datetime'
        mediaContent:
          $ref: '#/components/schemas/mediaContent'
        textContent:
          $ref: '#/components/schemas/textContent'
     
    conversation-create:
      type: object
      required:
      - receiverID  # this can be derived from listingID
      - listingID
      properties:
        receiverID:
          $ref: 'schemas.yaml#/components/schemas/id'
        listingID:
          $ref: 'schemas.yaml#/components/schemas/id'
  
    conversation-close:
      type: object
      required:
      - conversationID
      properties:
        conversationID:
          $ref: '#/components/schemas/id'


    ##################### REPORT SCHEMAS #################################
    report:
      type: object
      required:
      - incidentID
      - reporterID
      - offenderID
      - location
      - offenseType
      - description
      - status
      - outcomes
      properties:
        incidentID:
          $ref: '#/components/schemas/id'
        reporterID:
          $ref: '#/components/schemas/id'
        offenderID:
          $ref: '#/components/schemas/id'
        victimID:
          $ref: '#/components/schemas/id'
        location:
          type: string
          format: enum(Conversation, Listing, Account)
        offenseType:
          type: string
          format: enum(scam, illegal-content, malicious-language)
        description:
          $ref: '#/components/schemas/description'
        status:
          type: string
          format: enum(reported, investigating, closed)
        outcomes:
          $ref: '#/components/schemas/report-outcomes'

    reports:
      type: array
      items:
      - $ref: '#/components/schemas/report' 

    report-review:
      type: object
      required:
      - outcomes
      properties:
        outcomes:
          $ref: '#/components/schemas/report-outcomes'

    report-create:
      type: object
      required:
      - offenderID
      - offenseLocation
      - offenseType
      - description
      properties:
        offenderID:
          $ref: '#/components/schemas/id'
        offenseLocation:
          $ref: '#/components/schemas/offenseLocation'
        offenseType:
          $ref: '#/components/schemas/offenseType'
        description:
          $ref: '#/components/schemas/description'

    report-modify:
      type: object
      required:
      - reportID
      - modifiedDetails
      properties:
        reportID:
          $ref: '#/components/schemas/id'
        report-modifiedDetails:
          $ref: '#/components/schemas/report-modifiedDetails'

    report-modifiedDetails:
      optional:
      - offenderID
      - offenseLocation
      - offenseType
      - description
      - status
      - outcome
      properties:
        offenderID:
          $ref: '#/components/schemas/id'
        offenseLocation:
          $ref: '#/components/schemas/offenseLocation'
        offenseType:
          $ref: '#/components/schemas/offenseType'
        description:
          $ref: '#/components/schemas/description'
        status:
          $ref: '#/components/schemas/report-status'
        outcomes:
          $ref: '#/components/schemas/report-outcomes'



    ##################### SANCTIONS SCHEMAS #################################
    sanction:
      type: string
      format: enum(warning, temp-ban, perma-ban)

    sanctions:
      type: array
      items:
      - $ref: '#/components/schemas/sanction'

    sanction-create:
      type: object
      required:
      - sanction
      properties:
        sanctions:
          $ref: '#/components/schemas/sanction'

    sanction-overwrite:
      type: object
      required:
      - sanctionID
      - sanctionsObject
      properties:
        sanctionsID:
          $ref: '#/components/schemas/id'
        sanctionsObject:
          $ref: '#/components/schemas/sanction-create'

    sanction-close:
      type: object
      required:
      - sanctionID
      properties:
        sanctionID:
          $ref: '#/components/schemas/id'



    ########################### REQUEST SCHEMAS ##################################
    request:
      type: object
      required:
      - incidentID
      - reporterID
      - requestType
      - description
      - status
      - outcomes
      properties:
        incidentID:
          $ref: '#/components/schemas/id'
        reporterID:
          $ref: '#/components/schemas/id'
        requestType:
          $ref: '#/components/schemas/requestType'
        description:
          $ref: '#/components/schemas/description'
        status:
          type: string
          format: enum(reported, investigating, closed)
        outcomes:
          $ref: '#/components/schemas/report-outcomes'

    request-create:
      type: object
      required:
      - description
      - requestType
      properties:
        description:
          $ref: '#/components/schemas/description'
        requestType:
          $ref: '#/components/schemas/requestType'

    request-close:
      type: object
      required:
      - requestId
      properties:
        description:
          $ref: '#/components/schemas/id'
    
    reset-request:
      type: object
      required:
      - email
      properties:
        email:
          $ref: '#/components/schemas/email'

    reset-execute:
      type: object
      required:
      - password
      properties:
        password:
          $ref: '#/components/schemas/password'


    ########################### LOWER LEVEL SCHEMAS ####################################

    # TODO: This schema's structure is very likely to be changed in the near future
    mediaContent:
      type: object
      optional:
      - media
      - description
      properties:
        media:
          $ref: '#/components/schemas/media-resource'
        description:
          $ref: '#/components/schemas/description'

    textContent:
      type: string


    # TODO: This needs to be decided depending on what level of accuracy was decided -- This may also be influenced by the maps api that is ended up using
    address:
      type: object
      required:
      - country
      - postcode
      optional:
      - street # which would include door number
      properties:
        country:
          $ref: '#/components/schemas/country'
        city:
          $ref: '#/components/schemas/city'
        postcode:
          $ref: '#/components/schemas/postcode'
        street:
          $ref: '#/components/schemas/street'

    media: # i.e media = ["url1", "url2", ...]
      type: array
      items:
      - $ref: '#/components/schemas/mediaContent'

    media-resource:
      type: string
      format: url




    ############################## LOW-LEVEL COMPONENTS ###############################
    country:
      type: string

    city:
      type: string

    postcode:
      type: string

    street:
      type: string

    ## we'll define formats for these types below soon (e.g. sizes and other attributes)
    id:
      type: string

    name:
      type: string

    description:
      type: string

    photo:
      type: string
      format: url
    
    title:
      type: string

    date:
      type: string
      format: ISO Date (8601) # can be changed

    datetime:
      type: string
      format: ISO Datetime (8601) # can be changed

    password:
      type: string
      format: password

    email:
      type: string
      format: email
    
    category:
      type: string
      format: enum

    condition:
      type: string
      format: enum

    path:
      type: string
      format: path
    
    color:
      type: string
      format: hex


    ## Report-related schemas
    report-outcomes:
      type: array
      items:
      - $ref: '#/components/schemas/report-outcome'

    report-outcome:
      type: string
      format: enum(dismissed, warning, temp-ban, perma-ban)

    report-status:
      type: string
      format: enum(waiting, investigating, closed)

    offenseType:
      type: string
      format: enum(scam, illegal-content, malicious-language)

    offenseLocation:
      type: string
      format: enum(Conversation, Listing, Account)

    requestType:
      type: string
      format: enum(report-appeal, bug-fix, account-fix, feature-request)
