##TODO: define the enums

## The currently supported entities are:
## 1. User
##    --> user-view
##    --> users-search
## 2. Listing
##    --> listings-search
##    --> listing-create
##    --> listing-modify
##    --> listing-close
## 3. Account
##    --> account-signup
##    --> account-login
##    --> account-close
##    --> account-modify
## 2. Report
##    --> 
## 3. Request
## 5. Sanctions

components:
  schemas:



    ################ USER SCHEMAS ############################   
    user:
      type: object
      required:
      - userID
      - name
      - bio
      - profilePics
      properties:
        userID:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/name'
        bio:
          $ref: '#/components/schemas/description'
        profilePics:
          $ref: '#/components/schemas/media'

    user-view:
      type: object
      required:
      - name
      - dob
      - email
      - profilePhoto
      properties:
        name:
          $ref: '#/components/schemas/name'
        dob:
          $ref: '#/components/schemas/date'
        email:
          $ref: '#/components/schemas/email'
        profilePicture:
          $ref: '#/components/schemas/photo'

    user-search:
      type: array
      items:
        $ref: '#/components/schemas/user-view'




    ############### LISTING SCHEMAS #########################
    listing-own:
      type: object
      required: 
      - listingID # the id of the listing
      - contributorID # the id of the contributor
      - title
      - description
      - location
      - categoryID
      - condition
      - media ## this will encompass videos, photos and what other
      - creationDate
      - modificationDate # Ignoring archived date, and last modified
      optional:
      - receiverID
      - closedDate
      properties:
        listingID:
          $ref: '#/components/schemas/id'
        contributorID:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/title'
        description:
          $ref: '#/components/schemas/description'
        location:
          $ref: '#/components/schemas/address'
        categoryID:
          $ref: '#/components/schemas/id'
        condition:
          $ref: '#/components/schemas/condition'
        media:
          $ref: '#/components/schemas/media'
        creationDate:
          $ref: '#/components/schemas/date'
        modificationDate:
          $ref: '#/components/schemas/date'
        closedDate:
          $ref: '#/components/schemas/date'
        receiverID:
          $ref: '#/components/schemas/id'

    listing-view:
      type: object
      # these are the required parameters
      required:
      - listingID # the id of the listing
      - contributorID # the id of the contributor
      - title
      - description
      - location
      - categoryID
      - condition
      - creationDate
      - modificationDate # Ignoring archived date, and last modified
      - media ## this will encompass videos, photos and what other
      properties:
        listingID:
          $ref: '#/components/schemas/id'
        contributorID:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/title'
        description:
          $ref: '#/components/schemas/description'
        location:
          $ref: '#/components/schemas/address'
        categoryID:
          $ref: '#/components/schemas/id'
        condition:
          $ref: '#/components/schemas/condition'
        creationDate:
          $ref: '#/components/schemas/date'
        modificationDate:
          $ref: '#/components/schemas/date'
        media:
          $ref: '#/components/schemas/media'

    listing-descriptor:
      type: object
      required:
      - listingID
      - contributorID
      - title
      - location
      - categoryID
      - media
      properties:
        listingID:
          $ref: '#/components/schemas/id'
        contributorID:
          $ref: '#/components/schemas/id'
        location:
          $ref: '#/components/schemas/address'
        media:
          $ref: '#/components/schemas/media'
        condition:
          $ref: '#/components/schemas/condition'
        categoryID:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/title'

    listings-private:
      type: array
      items:
        $ref: '#/components/schemas/listing-own'
        
    listings-public:
      type: array
      items:
        $ref: '#/components/schemas/listing-view'

    listings-descriptor:
      type: array
      items:
        $ref: '#/components/schemas/listing-descriptor'

    listing-create:
      type: object
      required:
      - title
      - description
      - categoryID
      - condition
      - media ## this will encompass videos, photos and what other
      oneOf:
      - location
      - addressID
      properties:
        description:
          $ref: '#/components/schemas/description'
        location:
          $ref: '#/components/schemas/address'
        categoryID:
          $ref: '#/components/schemas/id'
        media:
          $ref: '#/components/schemas/media'
        condition:
          $ref: '#/components/schemas/condition'
        title:
          $ref: '#/components/schemas/title'

    listing-close:
      type: object
      required:
        - listingID
      optional:
        - receiverID
      properties:
        listingID:
          $ref: '#/components/schemas/id'
        receiverID:
          $ref: '#/components/schemas/id'
        

    listing-modify:
      type: object
      required:
      - listingID
      - password
      - modifiedDetails
      properties:
        password:
          $ref: '#/components/schemas/password'
        variable-modification:
          $ref: '#/components/schemas/listing-modifiedDetails'
        listingID:
          $ref: '#/components/schemas/id'
    
    listing-modifiedDetails:
      type: object
      optional:
      - title
      - description
      - location
      - categoryID
      - media
      properties:
        description:
          $ref: '#/components/schemas/description'
        location:
          $ref: '#/components/schemas/address'
        categoryID:
          $ref: '#/components/schemas/id'
        media:
          $ref: '#/components/schemas/media'

    category-descriptor:
      type: object
      required:
      - categoryID
      - categoryName
      - categoryPath
      - icon
      - color
      properties:
        categoryID:
          $ref: '#/componnents/schemas/id'
        categoryName:
          $ref: '#/components/schemas/category'
        categoryPath: ## This can be used to derived parent categories
          $ref: '#/components/schemas/path'
        icon:
          $ref: '#/components/schemas/photo'
        color:
          $ref: '#/components/schemas/color'



    ######################## ACCOUNT SCHEMAS ###########################
    account-signup:
      type: object
      required:
      - name
      - email
      - password
      - dob # DoB (keeping lowecase for consistency on naming)
      optional:
      - address
      properties:
        name:
          $ref: '#/components/schemas/name'
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
        dob:
          $ref: '#/components/schemas/date'
        address:
          $ref: '#/components/schemas/address'
      example:
        name: Sam Sepiol
        email: sspeiol@protonmail.org
        dob: '1986-09-17'
        
    account-login:
      type: object
      required:
      - email
      - password
      - registrationToken ## this is what FCM calls it
      properties:
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
        registrationToken:
          $ref: '#/components/schemas/id'

    account-close:
      type: object
      required:
      - password
      properties:
        password:
          $ref: '#/components/schemas/password'

    account-modify:
      type: object
      required:
      # accountID not neccessary since we should be able to retrieve the accountId from a valid and verified JWT token
      - password
      - modifiedDetails
      properties:
        password:
          $ref: '#/components/schemas/password'
        variable-modification:
          $ref: '#/components/schemas/account-modifiedDetails'

    account-modifiedDetails:
      type: object
      optional:
      - name
      - email
      - dob
      - password
      properties:
        name:
          $ref: '#/components/schemas/name'
        email:
          $ref: '#/components/schemas/email'
        dob:
          $ref: '#/components/schemas/date'
        password:
          $ref: '#/components/schemas/password'

    account-address-list:
      type: array
      items:
        $ref: '#/components/schemas/account-address'

    account-address:
      type: object
      required:
        - addressID
        - address
      properties:
        addressID:
          $ref: '#/components/schemas/id'
        address:
          $ref: '#/components/schemas/address'

    ## The intention of this path is for the client to locally store this data so that it can be reused
    ## when viewing future data
    category-descriptor-list:
      type: array
      items:
        $ref: '#/components/schemas/category-descriptor'

    
    ####################### ACCOUNT RESET SCHEMAS ####################


    ## NOTE: Account reset schemas no longer exist --> Please use the /account/modify endpoint


    ###################### PASSWORD RESET SCHEMAS ####################
    ## These correspond to /passwordResetRequest and /passwordResetExecute which are used when the user cannot
    ## login to their account
    password-reset-request:
      type: object
      required:
      - email
      properties:
        email:
          $ref: '#/components/schemas/email'
    
    password-reset-execute:
      type: object
      required:
      - email
      - resetToken
      - password
      properties:
        email:
          $ref: '#/components/schemas/email'
        resetToken:
          $ref: '#/components/schemas/resetToken'
        password:
          $ref: '#/components/schemas/password'
          

    #################### CONVERSATION SCHEMAS ########################
    # TODO: There may be media links such as user profile picture to be included here
    conversation-descriptor:
      type: object
      required:
      - conversationID
      - receiver
      - listing
      properties:
        conversationID:
          $ref: '#/components/schemas/id'
        listing-descriptor:
          $ref: '#/components/schemas/listing-descriptor'
        receiver-descriptor:
          $ref: '#/components/schemas/user'

    conversation:
      type: array
      items:
        $ref: '#/components/schemas/conversation-message'

    conversation-message:
      type: object
      required:
      # senderID and receiverID was removed - this is because converstaions are on a per item basis (therefore, a receiver and buyer may have multiple ongoing discussions about different items)
      - receiverID
      - listingID
      - datetime
      - mediaContent
      - textContent
      properties:
        listingID:
          $ref: '#/components/schemas/listingID'
        datetime:
          $ref: '#/components/schemas/datetime'
        mediaContent:
          $ref: '#/components/schemas/mediaContent'
        textContent:
          $ref: '#/components/schemas/textContent'
     
    conversation-create:
      type: object
      required:
      - receiverID  # this can be derived from listingID
      - listingID
      properties:
        receiverID:
          $ref: 'schemas.yaml#/components/schemas/id'
        listingID:
          $ref: 'schemas.yaml#/components/schemas/id'
  
    conversation-close:
      type: object
      required:
      - conversationID
      properties:
        conversationID:
          $ref: '#/components/schemas/id'


    ########################### LOWER LEVEL SCHEMAS ####################################

    # TODO: This schema's structure is very likely to be changed in the near future
    mediaContent:
      type: object
      optional:
      - media
      - description
      properties:
        media:
          $ref: '#/components/schemas/media-resource'
        description:
          $ref: '#/components/schemas/description'

    textContent:
      type: string


    # TODO: This needs to be decided depending on what level of accuracy was decided -- This may also be influenced by the maps api that is ended up using
    address:
      type: object
      required:
      - country
      - region
      - postcode
      properties:
        country:
          $ref: '#/components/schemas/country'
        region:
          $ref: '#/components/schemas/region'
        postcode:
          $ref: '#/components/schemas/postcode'

    media: # i.e media = ["url1", "url2", ...]
      type: array
      items:
      - $ref: '#/components/schemas/mediaContent'

    media-resource:
      type: string
      format: url




    ############################## LOW-LEVEL COMPONENTS ###############################
    country:
      type: string

    ##NOTE:  This is no longer used since not everyone lives in a city
    # city:
    #   type: string

    ## This is replaceing the city attribute in address-related schemas
    region:
      type: string
      # current proposal is that the value should be enum of counties

    postcode:
      type: string

    street:
      type: string

    ## we'll define formats for these types below soon (e.g. sizes and other attributes)
    id:
      type: string

    name:
      type: string

    description:
      type: string

    photo:
      type: string
      format: url
    
    title:
      type: string

    date:
      type: string
      format: ISO Date (8601) # can be changed

    datetime:
      type: string
      format: ISO Datetime (8601) # can be changed

    password:
      type: string
      format: password

    resetToken:
      type: string
      ## TODO: Update the type/format when completeing the design of passwordReset

    email:
      type: string
      format: email
    
    category:
      type: string
      format: enum

    condition:
      type: string
      format: enum

    path:
      type: string
      format: path
    
    color:
      type: string
      format: hex

